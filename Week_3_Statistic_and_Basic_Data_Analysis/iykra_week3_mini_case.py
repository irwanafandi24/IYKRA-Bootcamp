# -*- coding: utf-8 -*-
"""IYKRA Week3 - mini case.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BjYrH6G99JDHOb5Lgqs-ngs5YDSj6NbA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math


import matplotlib.pyplot as plt
import seaborn as sns
sns.set()



df = pd.read_csv("data.csv", na_values='?')

"""**Part 1**
- Quick-look (Dimension, data-type, head/tail, summary statistic, etc)
- Identify missing value. If any, how will you handle it?
-Perform visualization using at least 5 difference visualization technique (barplot, scatterplot, area, boxplot, pie chart, line chart, etc)

**Part 2**
- cari brand with highest price.
- Maximum horsepower for car with 6 cylinder engine.
- Average peak-rpm for 'turbo' style aspiration car.
- Average price based on body style.

# Part 1

## Quick-look (Dimension, data-type, head/tail, summary statistic, etc)
"""

df.shape

df.dtypes

df.isnull().sum()

df.columns[df.isnull().any()]

df.head()

df.tail()

"""### one row filling missing value"""

df = df.apply(lambda x: x.fillna(x.median()) if x.dtype.kind in 'iuf' else x.fillna(df['num-of-doors'].mode()[0]))

df.isnull().sum()

"""### Handling missing values with analysis"""

df['normalized-losses'] = df['normalized-losses'].astype(float)
sns.distplot(df['normalized-losses'], bins=10)
plt.show()

df['normalized-losses'].fillna(df['normalized-losses'].median(), inplace=True)

#num-of-doors
df['num-of-doors'].fillna(df['num-of-doors'].mode()[0], inplace=True)

#bore 
df['bore'] = df['bore'].astype(float)
sns.distplot(df['bore'], bins=10)
plt.show()

df['bore'].fillna(df['bore'].median(), inplace=True)

#stroke 
df['stroke'].fillna(df['stroke'].median(), inplace=True)

#horsepower 
df['horsepower'].fillna(df['horsepower'].median(), inplace=True)

#peak-rpm 
df['peak-rpm'].fillna(df['peak-rpm'].median(), inplace=True)

#price
df['price'].fillna(df['price'].median(), inplace=True)

df.describe()

"""## Perform visualization using at least 5 difference visualization technique (barplot, scatterplot, area, boxplot, pie chart, line chart, etc)"""

ax = df['make'].value_counts().plot(kind='bar', figsize=(20,10), color ='orange')
plt.xlabel('Brand', fontsize=14)
plt.ylabel('Frequency', fontsize=14)
plt.title('The  number of car sales by Brand' , fontsize=16)

for p in ax.patches:
    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))

fig= plt.figure(figsize=(10,7))
plt.scatter(df['price'], df['horsepower'])
plt.xlabel('Price', fontsize=14)
plt.ylabel('horsepower', fontsize=14)
plt.title("The relation between price and house power", fontsize=16)
plt.show()

fig= plt.figure(figsize=(10,7))
sns.boxplot(x=df['price'])

len(df[df['price'] >30000])

df[df['price'] >30000]['make']

from matplotlib.pyplot import pie, axis, show
sums = df['horsepower'].groupby(df['fuel-type']).mean()
axis('equal');
pie(sums, labels=sums.index);
show()



"""#Part 2

## Cari brand with highest price.
"""

df[df['price']==df['price'].max()]['make']

"""## Maximum horsepower for car with 6 cylinder engine."""

df[df['num-of-cylinders'] == 'six']['horsepower'].max()

"""## Average peak-rpm for 'turbo' style aspiration car."""

df[df['aspiration'] == 'turbo']['peak-rpm'].mean()

"""## Average price based on body style."""

grop_body = df[['body-style','price']].groupby(['body-style']).mean()
grop_body.sort_values(['price'], ascending=False)

