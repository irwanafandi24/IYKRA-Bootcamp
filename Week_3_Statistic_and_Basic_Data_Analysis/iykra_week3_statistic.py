# -*- coding: utf-8 -*-
"""IYKRA Week3 -  statistic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MffTptNmW3Y2xf1fkAw1EPqiXBsktE77
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy import stats
sns.set()
df = pd.read_csv("insurance.csv")

"""## Question 1

### The shape of the data
"""

# A. The shape of the data
df.shape

"""### The data type of each attribute"""

#B. The data type of each attribute
df.info()

df.dtypes

"""### Checking the presence of missing values"""

#C. Checking the presence of missing values
df.isnull().sum()

#compare the non-null value with range index, if it is different. So there is missing value in that data
df.info()

"""### 5 points summary of numerical attributes"""

# D. 5 points summary of numerical attributes
df.describe()

"""### Distribution & The measure of skewness of 'bmi', 'age' and 'charges' columns"""

# E. Distribution of 'bmi', 'age' and 'charges' columns
# F. The measure of skewness of 'bmi', 'age', and 'charges' columns
fig, ax = plt.subplots(figsize=(10,5))
sns.distplot(df['bmi'], bins=15)
plt.show()

#skewness value
df['bmi'].skew()

sns.distplot(df['age'], bins=20)
plt.show()

#skewness value
df['age'].skew()

sns.distplot(df['charges'], bins=15)
# df['charges'].plot(kind = 'density')
plt.show()

#skewness value
df['charges'].skew()

"""### Checking the presence of outliers in 'bmi', 'age' and 'charges' columns"""

# G. Checking the presence of outliers in 'bmi', 'age' and 'charges' columns
sns.boxplot(y=df['bmi'])

Q1 = df['bmi'].quantile(0.25)
Q3 = df['bmi'].quantile(0.75)
IQR = Q3-Q1
Lb = Q1-(1.5*IQR) 
Ub = Q3+(1.5*IQR)
len(df[(df['bmi']<Lb) | (df['bmi']>Ub)])
# print(Q1,' ', Q3,' ',' ',IQR,' ',Lb,' ', Ub)

sns.boxplot(y=df['age'])

Q1 = df['age'].quantile(0.25)
Q3 = df['age'].quantile(0.75)
IQR = Q3-Q1
Lb = Q1-(1.5*IQR) 
Ub = Q3+(1.5*IQR)
len(df[(df['age']<Lb) | (df['age']>Ub)])
# print(Q1,' ', Q3,' ',' ',IQR,' ',Lb,' ', Ub)

sns.boxplot(y=df['charges'])

Q1 = df['charges'].quantile(0.25)
Q3 = df['charges'].quantile(0.75)
IQR = Q3-Q1
Lb = Q1-(1.5*IQR) 
Ub = Q3+(1.5*IQR)
len(df[(df['charges']<Lb) | (df['charges']>Ub)])
# print(Q1,' ', Q3,' ',' ',IQR,' ',Lb,' ', Ub)

#IQR 
def outlier(x):
  if x > Ub:
    return Ub
  elif x < Lb:
    return Lb
  else:
    return x

df["charges"] = df["charges"].apply(outlier)
sns.boxplot(y=df['charges'])



"""## Question 2
Link : https://towardsdatascience.com/inferential-statistics-series-t-test-using-numpy-2718f8f9bf2f
"""

#Define the hypothesis
#H0 : Mean charges no-smoke and smoke is equals
#Ha : Mean charges no-smoke and smoke is not equals

#get the data of smoker an and non-smoker
rokok = df[df['smoker'] == 'yes']
norokok = df[df['smoker'] == 'no']
print("There are : ", len(rokok)," like smoke and ",len(norokok)," doesn't like smoke")
print("Average charges peple who like smoke ",rokok['charges'].mean()," doesn't like smoke ", norokok['charges'].mean())

t2, p2 = stats.ttest_ind(rokok['charges'],norokok['charges'])
print("t = " + str(t2))
print("p = " + str(p2))

"""# Learn shorcut"""

import pandas as pd

df = pd.read_csv('insurance.csv') #read csv data and save in df variable
df.head()

df_x = df.copy()
def grouped(x):
  return "over" if x>30 else "normal"

df_x["category"] = df['bmi'].apply(grouped)
df_x.head()

df1 = pd.DataFrame({'Name':['A','B','C'],
                    'Age':[20,15,25]})
df2 = pd.DataFrame({'Name':['D','E'],
                    'Age':[22,25]})
df_result = pd.concat([df1, df2], ignore_index = True)
df_result

df_result.drop([1,3], axis=0, inplace=True)
df_result

df_result.drop(['Name','Age'], axis=1, inplace=True)
df_result

df_result

new_name = {'Name':'passient',
            'Age':'age'}
df_result.rename(columns=new_name, inplace=True)
df_result

df.head()

df.tail()

mode = df['age'].mode()
median = df['age'].median()
mean = round(df['age'].mean(),2)
min = df['age'].min()
max = df['age'].max()
deviasi = round(df['age'].std(),2)
count = df['age'].count()

print("Mean: {} | Mode: {} | Median: {}". format(mean, mode[0], median))
print("Min: {} | Max: {}".format(min, max))
print("Standar Deviasi: {} | Count: {}".format(deviasi, count))

df.describe()

df.shape

df.columns

bin = [15, 22, 35, 50,100]
label = ['teenager','productive','superb','old']
df['age_category'] = pd.cut(df['age'], bin, labels=label)
df[['age','age_category']].head(7)

df[(df['age_category']=='productive')]['age'].tail()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['age_level'] = le.fit_transform(df['age_category'])
df.tail()

df = pd.get_dummies(df['age_category'])

df

